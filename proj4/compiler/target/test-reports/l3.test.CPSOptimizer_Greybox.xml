<?xml version='1.0' encoding='UTF-8'?>
<testsuite hostname="xinu11.cs.purdue.edu" name="l3.test.CPSOptimizer_Greybox" tests="42" errors="0" failures="5" time="-0.042">
                     <properties>
      <property name="jline.esc.timeout" value="0"/><property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/><property name="sun.boot.library.path" value="/usr/opt/oracle-jdk-bin-1.8.0.92/jre/lib/amd64"/><property name="java.vm.version" value="25.92-b14"/><property name="java.vm.vendor" value="Oracle Corporation"/><property name="java.vendor.url" value="http://java.oracle.com/"/><property name="path.separator" value=":"/><property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/><property name="file.encoding.pkg" value="sun.io"/><property name="user.country" value="US"/><property name="sun.java.launcher" value="SUN_STANDARD"/><property name="sun.os.patch.level" value="unknown"/><property name="java.vm.specification.name" value="Java Virtual Machine Specification"/><property name="user.dir" value="/u/antor/u7/ravi18/CS502/proj4/compiler"/><property name="java.runtime.version" value="1.8.0_92-b14"/><property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/><property name="java.endorsed.dirs" value="/usr/opt/oracle-jdk-bin-1.8.0.92/jre/lib/endorsed"/><property name="os.arch" value="amd64"/><property name="java.io.tmpdir" value="/tmp"/><property name="line.separator" value="
"/><property name="java.vm.specification.vendor" value="Oracle Corporation"/><property name="os.name" value="Linux"/><property name="sun.jnu.encoding" value="ANSI_X3.4-1968"/><property name="java.library.path" value="/p/oracle12c::/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"/><property name="java.specification.name" value="Java Platform API Specification"/><property name="java.class.version" value="52.0"/><property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/><property name="os.version" value="4.6.7"/><property name="user.home" value="/homes/ravi18"/><property name="user.timezone" value="GMT+0"/><property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/><property name="file.encoding" value="ANSI_X3.4-1968"/><property name="java.specification.version" value="1.8"/><property name="java.class.path" value="/u/antor/u7/ravi18/Desktop/ECLIPSE/sbt/bin/sbt-launch.jar"/><property name="user.name" value="ravi18"/><property name="jline.shutdownhook" value="false"/><property name="java.vm.specification.version" value="1.8"/><property name="sun.java.command" value="/u/antor/u7/ravi18/Desktop/ECLIPSE/sbt/bin/sbt-launch.jar test"/><property name="java.home" value="/usr/opt/oracle-jdk-bin-1.8.0.92/jre"/><property name="sun.arch.data.model" value="64"/><property name="user.language" value="en"/><property name="java.specification.vendor" value="Oracle Corporation"/><property name="awt.toolkit" value="sun.awt.X11.XToolkit"/><property name="java.vm.info" value="mixed mode"/><property name="java.version" value="1.8.0_92"/><property name="java.ext.dirs" value="/usr/opt/oracle-jdk-bin-1.8.0.92/jre/lib/ext:/usr/java/packages/lib/ext"/><property name="sun.boot.class.path" value="/usr/opt/oracle-jdk-bin-1.8.0.92/jre/lib/resources.jar:/usr/opt/oracle-jdk-bin-1.8.0.92/jre/lib/rt.jar:/usr/opt/oracle-jdk-bin-1.8.0.92/jre/lib/sunrsasign.jar:/usr/opt/oracle-jdk-bin-1.8.0.92/jre/lib/jsse.jar:/usr/opt/oracle-jdk-bin-1.8.0.92/jre/lib/jce.jar:/usr/opt/oracle-jdk-bin-1.8.0.92/jre/lib/charsets.jar:/usr/opt/oracle-jdk-bin-1.8.0.92/jre/lib/jfr.jar:/usr/opt/oracle-jdk-bin-1.8.0.92/jre/classes"/><property name="java.vendor" value="Oracle Corporation"/><property name="file.separator" value="/"/><property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/><property name="sun.io.unicode.encoding" value="UnicodeLittle"/><property name="sun.cpu.endian" value="little"/><property name="sun.cpu.isalist" value=""/>
    </properties>
                     <testcase classname="l3.test.CPSOptimizer_Greybox" name="testFunInlining" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testConstantFoldingPlus" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testConstantFoldingMinus" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testConstantFoldingTimes" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testConstantFoldingDiv" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testConstantFoldingMod" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testConstantFoldingIntChar" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testConstantFoldingCharInt" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testConstantFoldingTypePrims" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testConstantFoldingBooleanAnd" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testConstantFoldingBooleanOr" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testConstantFoldDCEContinuations" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testConstantPropagationSimple" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testNeutralElementsAddZero1" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testNeutralElementsAddZero2" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testEtaReduction" time="-0.001">
                                                 <failure message="java.lang.AssertionError: assertion failed: Checks failed for: 

      (letrec ((f (fun (x) x)) (g (fun (y) (f y))) (h (fun (z) (g z))))
        (@ + (@ + (@ + (@ + (@ + (@ + (@ + (@ + (g 1) (g 2))
        (g 3)) (h 1)) (h 2)) (h 3)) (f 1)) (f 2)) (f 3)))
    
Statistics:
Instruction Stats
=================
      18  AppF
       9  AppC
       9  LetC
       5  LetL
       1  Halt
       1  LetP
       1  LetF

Value Primitives Stats
======================
       1  CPSArithShiftR$

Functions defined: 3
Continuations defined: 9
" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: java.lang.AssertionError: assertion failed: Checks failed for: 

      (letrec ((f (fun (x) x)) (g (fun (y) (f y))) (h (fun (z) (g z))))
        (@ + (@ + (@ + (@ + (@ + (@ + (@ + (@ + (g 1) (g 2))
        (g 3)) (h 1)) (h 2)) (h 3)) (f 1)) (f 2)) (f 3)))
    
Statistics:
Instruction Stats
=================
      18  AppF
       9  AppC
       9  LetC
       5  LetL
       1  Halt
       1  LetP
       1  LetF

Value Primitives Stats
======================
       1  CPSArithShiftR$

Functions defined: 3
Continuations defined: 9

	at scala.Predef$.assert(Predef.scala:165)
	at l3.test.infrastructure.CPSOptTest.testCPSOptStats(CPSOptTest.scala:65)
	at l3.test.infrastructure.CPSOptTest.testCPSOptEarly(CPSOptTest.scala:69)
	at l3.test.CPSOptimizer_Greybox.testEtaReduction(CPSOptimizer_Greybox.scala:14)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:24)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:136)
	at com.novocode.junit.JUnitRunner.run(JUnitRunner.java:87)
	at sbt.RunnerWrapper$1.runRunner2(FrameworkWrapper.java:223)
	at sbt.RunnerWrapper$1.execute(FrameworkWrapper.java:236)
	at sbt.ForkMain$Run$2.call(ForkMain.java:296)
	at sbt.ForkMain$Run$2.call(ForkMain.java:286)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
</failure>
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testEtaReductionInfintelyRecursiveFunction" time="-0.001">
                                                 <failure message="java.lang.AssertionError: assertion failed: Checks failed for: 
(letrec ((f (fun (x) (g x))) (g (fun (x) (f x)))) (if (@ = (@byte-read) -1) (g 3) #u))
Statistics:
Instruction Stats
=================
       5  LetL
       4  LetP
       3  LetC
       1  Halt
       1  AppC
       1  If
       1  LetF

Value Primitives Stats
======================
       1  CPSByteRead$
       1  CPSArithShiftR$
       1  CPSArithShiftL$
       1  CPSOr$

Logic Primitives Stats
======================
       1  CPSEq$

Functions defined: 2
Continuations defined: 3
" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: java.lang.AssertionError: assertion failed: Checks failed for: 
(letrec ((f (fun (x) (g x))) (g (fun (x) (f x)))) (if (@ = (@byte-read) -1) (g 3) #u))
Statistics:
Instruction Stats
=================
       5  LetL
       4  LetP
       3  LetC
       1  Halt
       1  AppC
       1  If
       1  LetF

Value Primitives Stats
======================
       1  CPSByteRead$
       1  CPSArithShiftR$
       1  CPSArithShiftL$
       1  CPSOr$

Logic Primitives Stats
======================
       1  CPSEq$

Functions defined: 2
Continuations defined: 3

	at scala.Predef$.assert(Predef.scala:165)
	at l3.test.infrastructure.CPSOptTest.testCPSOptStats(CPSOptTest.scala:65)
	at l3.test.infrastructure.CPSOptTest.testCPSOptEarly(CPSOptTest.scala:69)
	at l3.test.CPSOptimizer_Greybox.testEtaReductionInfintelyRecursiveFunction(CPSOptimizer_Greybox.scala:21)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:24)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:136)
	at com.novocode.junit.JUnitRunner.run(JUnitRunner.java:87)
	at sbt.RunnerWrapper$1.runRunner2(FrameworkWrapper.java:223)
	at sbt.RunnerWrapper$1.execute(FrameworkWrapper.java:236)
	at sbt.ForkMain$Run$2.call(ForkMain.java:296)
	at sbt.ForkMain$Run$2.call(ForkMain.java:286)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
</failure>
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testContInlining" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testDCEFunsSimple" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testDCEFunsRecursive1" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testDCEFunsRecursive2" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testDCEFunsRecursive3WithEtaReduction" time="-0.001">
                                                 <failure message="java.lang.AssertionError: assertion failed: Checks failed for: 
(letrec ((f (fun (x) (if (@ = x 0) 0 (g (@ - x 1))))) (g (fun (y) (f y))) (h (fun (z) z))) (@ + (@ + (f 0) (f 0)) (f 0)))
Statistics:
Instruction Stats
=================
       9  LetC
       8  LetL
       3  AppC
       3  If
       3  AppF
       1  Halt
       1  LetP
       1  LetF

Value Primitives Stats
======================
       1  CPSArithShiftR$

Logic Primitives Stats
======================
       3  CPSEq$

Functions defined: 2
Continuations defined: 9
" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: java.lang.AssertionError: assertion failed: Checks failed for: 
(letrec ((f (fun (x) (if (@ = x 0) 0 (g (@ - x 1))))) (g (fun (y) (f y))) (h (fun (z) z))) (@ + (@ + (f 0) (f 0)) (f 0)))
Statistics:
Instruction Stats
=================
       9  LetC
       8  LetL
       3  AppC
       3  If
       3  AppF
       1  Halt
       1  LetP
       1  LetF

Value Primitives Stats
======================
       1  CPSArithShiftR$

Logic Primitives Stats
======================
       3  CPSEq$

Functions defined: 2
Continuations defined: 9

	at scala.Predef$.assert(Predef.scala:165)
	at l3.test.infrastructure.CPSOptTest.testCPSOptStats(CPSOptTest.scala:65)
	at l3.test.infrastructure.CPSOptTest.testCPSOptEarly(CPSOptTest.scala:69)
	at l3.test.CPSOptimizer_Greybox.testDCEFunsRecursive3WithEtaReduction(CPSOptimizer_Greybox.scala:34)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:24)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:136)
	at com.novocode.junit.JUnitRunner.run(JUnitRunner.java:87)
	at sbt.RunnerWrapper$1.runRunner2(FrameworkWrapper.java:223)
	at sbt.RunnerWrapper$1.execute(FrameworkWrapper.java:236)
	at sbt.ForkMain$Run$2.call(ForkMain.java:296)
	at sbt.ForkMain$Run$2.call(ForkMain.java:286)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
</failure>
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testDCELetLiteral" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testDCELetPrimitive" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testFunInliningInsideFunctionBodySameLetRec" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testFunInliningInsideFunctionBodyDifferentLetRecs" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testFunInliningCrasher" time="-0.001">
                                                 <failure message="java.lang.AssertionError: assertion failed: Checks failed for: 
(letrec ((f (fun (x) (if (@ = x 0) 0 (g (@ - x 1))))) (g (fun (y) (f y))) (h (fun (z) z))) (f 0))
Statistics:
Instruction Stats
=================
       4  LetL
       3  LetC
       1  Halt
       1  LetP
       1  AppC
       1  If
       1  AppF
       1  LetF

Value Primitives Stats
======================
       1  CPSArithShiftR$

Logic Primitives Stats
======================
       1  CPSEq$

Functions defined: 2
Continuations defined: 3
" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: java.lang.AssertionError: assertion failed: Checks failed for: 
(letrec ((f (fun (x) (if (@ = x 0) 0 (g (@ - x 1))))) (g (fun (y) (f y))) (h (fun (z) z))) (f 0))
Statistics:
Instruction Stats
=================
       4  LetL
       3  LetC
       1  Halt
       1  LetP
       1  AppC
       1  If
       1  AppF
       1  LetF

Value Primitives Stats
======================
       1  CPSArithShiftR$

Logic Primitives Stats
======================
       1  CPSEq$

Functions defined: 2
Continuations defined: 3

	at scala.Predef$.assert(Predef.scala:165)
	at l3.test.infrastructure.CPSOptTest.testCPSOptStats(CPSOptTest.scala:65)
	at l3.test.infrastructure.CPSOptTest.testCPSOptEarly(CPSOptTest.scala:69)
	at l3.test.CPSOptimizer_Greybox.testFunInliningCrasher(CPSOptimizer_Greybox.scala:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:24)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:136)
	at com.novocode.junit.JUnitRunner.run(JUnitRunner.java:87)
	at sbt.RunnerWrapper$1.runRunner2(FrameworkWrapper.java:223)
	at sbt.RunnerWrapper$1.execute(FrameworkWrapper.java:236)
	at sbt.ForkMain$Run$2.call(ForkMain.java:296)
	at sbt.ForkMain$Run$2.call(ForkMain.java:286)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
</failure>
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testFunInliningRecursiveTrick" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testContInliningInsideContBody" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testConstantFoldingIntP" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testConstantFoldingIntPNot" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testNeutralElementsSubZero" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testNeutralElementsSubItself" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testNeutralElementsMulOne1" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testNeutralElementsMulOne2" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testNeutralElementsMulZero1" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testNeutralElementsMulZero2" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testNeutralElementsDivOne" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testCommonSubexpressionEliminationSimpleBlockTag" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testCommonSubexpressionEliminationComplexBlockTag" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testFunInlingAndDCE" time="-0.001">
                                                 
                                               </testcase><testcase classname="l3.test.CPSOptimizer_Greybox" name="testInliningConstantFoldingDCE" time="-0.001">
                                                 <failure message="java.lang.AssertionError: assertion failed: 
Output is different: (whitespace is always ignored)
source: 
 (def byte-write (fun (c) (@byte-write c)))
          (def function-compose
               (fun (f g)
                    (fun (x) (f (g x)))))
          (def + (fun (x y) (@+ x y)))
          (def succ (fun (x) (+ x 1)))
          (def twice (fun (x) (+ x x)))
          (byte-write ((function-compose succ twice) 39))
          (byte-write ((function-compose succ succ) 73))
          (byte-write ((function-compose twice succ) 4))
output: 
(let* ((v$1
        (fun (v$10 v$11)
          (let* ((v$12 1) (v$13 (@&gt;&gt; v$11 v$12)) (v$14 (@byte-write v$13)))
            (v$10 v$14))))
       (v$2
        (fun (v$15 v$16 v$17)
          (let* ((v$18 3)
                 (v$19 (@block-alloc-202 v$18))
                 (v$20 0)
                 (v$21 (@block-set! v$19 v$20 v$4))
                 (v$22 1)
                 (v$23 (@block-set! v$19 v$22 v$17))
                 (v$24 2)
                 (v$25 (@block-set! v$19 v$24 v$16)))
            (v$15 v$19))))
       (v$3
        (fun (v$26 v$27 v$28 v$29)
          (let* ((v$30
                  (cnt (v$31)
                    (let* ((v$32 0) (v$33 (@block-get v$28 v$32)))
                      (v$33 v$26 v$28 v$31))))
                 (v$34 0)
                 (v$35 (@block-get v$27 v$34)))
            (v$35 v$30 v$27 v$29))))
       (v$4
        (fun (v$36 v$37 v$38)
          (let* ((v$39 1)
                 (v$40 (@block-get v$37 v$39))
                 (v$41 2)
                 (v$42 (@block-get v$37 v$41)))
            (v$3 v$36 v$40 v$42 v$38))))
       (v$5
        (fun (v$43 v$44 v$45)
          (let* ((v$46 (@+ v$44 v$45)) (v$47 1) (v$48 (@- v$46 v$47)))
            (v$43 v$48))))
       (v$6 (fun (v$49 v$50) (let ((v$51 3)) (v$5 v$49 v$50 v$51))))
       (v$7 (fun (v$52 v$53 v$54) (v$6 v$52 v$54)))
       (v$8 (fun (v$55 v$56) (v$5 v$55 v$56 v$56)))
       (v$9 (fun (v$57 v$58 v$59) (v$8 v$57 v$59)))
       (v$60 1)
       (v$61 (@block-alloc-202 v$60))
       (v$62 0)
       (v$63 (@block-set! v$61 v$62 v$7))
       (v$64 (@block-alloc-202 v$60))
       (v$65 (@block-set! v$64 v$62 v$9))
       (v$66
        (cnt (v$67)
          (let* ((v$68 79)
                 (v$69
                  (cnt (v$70)
                    (let ((v$71
                           (cnt (v$72)
                             (let ((v$73
                                    (cnt (v$74)
                                      (let* ((v$75 147)
                                             (v$76
                                              (cnt (v$77)
                                                (let ((v$78
                                                       (cnt (v$79)
                                                         (let ((v$80
                                                                (cnt (v$81)
                                                                  (let* ((v$82
                                                                          9)
                                                                         (v$83
                                                                          (cnt (v$84)
                                                                            (let ((v$85
                                                                                   (cnt (v$86)
                                                                                     (halt v$62))))
                                                                              (v$1 v$85
                                                                                   v$84))))
                                                                         (v$87
                                                                          (@block-get v$81
                                                                                      v$62)))
                                                                    (v$87 v$83
                                                                          v$81
                                                                          v$82)))))
                                                           (v$2 v$80
                                                                v$64
                                                                v$61)))))
                                                  (v$1 v$78 v$77))))
                                             (v$88 (@block-get v$74 v$62)))
                                        (v$88 v$76 v$74 v$75)))))
                               (v$2 v$73 v$61 v$61)))))
                      (v$1 v$71 v$70))))
                 (v$89 (@block-get v$67 v$62)))
            (v$89 v$69 v$67 v$68)))))
  (v$2 v$66 v$61 v$64))
expected output: 
 (let* ((v$1 79)
                 (v$2 (@byte-write v$1))
                 (v$3 75)
                 (v$4 (@byte-write v$3))
                 (v$5 10)
                 (v$6 (@byte-write v$5))
                 (v$7 0))
             (halt v$7))" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: java.lang.AssertionError: assertion failed: 
Output is different: (whitespace is always ignored)
source: 
 (def byte-write (fun (c) (@byte-write c)))
          (def function-compose
               (fun (f g)
                    (fun (x) (f (g x)))))
          (def + (fun (x y) (@+ x y)))
          (def succ (fun (x) (+ x 1)))
          (def twice (fun (x) (+ x x)))
          (byte-write ((function-compose succ twice) 39))
          (byte-write ((function-compose succ succ) 73))
          (byte-write ((function-compose twice succ) 4))
output: 
(let* ((v$1
        (fun (v$10 v$11)
          (let* ((v$12 1) (v$13 (@&gt;&gt; v$11 v$12)) (v$14 (@byte-write v$13)))
            (v$10 v$14))))
       (v$2
        (fun (v$15 v$16 v$17)
          (let* ((v$18 3)
                 (v$19 (@block-alloc-202 v$18))
                 (v$20 0)
                 (v$21 (@block-set! v$19 v$20 v$4))
                 (v$22 1)
                 (v$23 (@block-set! v$19 v$22 v$17))
                 (v$24 2)
                 (v$25 (@block-set! v$19 v$24 v$16)))
            (v$15 v$19))))
       (v$3
        (fun (v$26 v$27 v$28 v$29)
          (let* ((v$30
                  (cnt (v$31)
                    (let* ((v$32 0) (v$33 (@block-get v$28 v$32)))
                      (v$33 v$26 v$28 v$31))))
                 (v$34 0)
                 (v$35 (@block-get v$27 v$34)))
            (v$35 v$30 v$27 v$29))))
       (v$4
        (fun (v$36 v$37 v$38)
          (let* ((v$39 1)
                 (v$40 (@block-get v$37 v$39))
                 (v$41 2)
                 (v$42 (@block-get v$37 v$41)))
            (v$3 v$36 v$40 v$42 v$38))))
       (v$5
        (fun (v$43 v$44 v$45)
          (let* ((v$46 (@+ v$44 v$45)) (v$47 1) (v$48 (@- v$46 v$47)))
            (v$43 v$48))))
       (v$6 (fun (v$49 v$50) (let ((v$51 3)) (v$5 v$49 v$50 v$51))))
       (v$7 (fun (v$52 v$53 v$54) (v$6 v$52 v$54)))
       (v$8 (fun (v$55 v$56) (v$5 v$55 v$56 v$56)))
       (v$9 (fun (v$57 v$58 v$59) (v$8 v$57 v$59)))
       (v$60 1)
       (v$61 (@block-alloc-202 v$60))
       (v$62 0)
       (v$63 (@block-set! v$61 v$62 v$7))
       (v$64 (@block-alloc-202 v$60))
       (v$65 (@block-set! v$64 v$62 v$9))
       (v$66
        (cnt (v$67)
          (let* ((v$68 79)
                 (v$69
                  (cnt (v$70)
                    (let ((v$71
                           (cnt (v$72)
                             (let ((v$73
                                    (cnt (v$74)
                                      (let* ((v$75 147)
                                             (v$76
                                              (cnt (v$77)
                                                (let ((v$78
                                                       (cnt (v$79)
                                                         (let ((v$80
                                                                (cnt (v$81)
                                                                  (let* ((v$82
                                                                          9)
                                                                         (v$83
                                                                          (cnt (v$84)
                                                                            (let ((v$85
                                                                                   (cnt (v$86)
                                                                                     (halt v$62))))
                                                                              (v$1 v$85
                                                                                   v$84))))
                                                                         (v$87
                                                                          (@block-get v$81
                                                                                      v$62)))
                                                                    (v$87 v$83
                                                                          v$81
                                                                          v$82)))))
                                                           (v$2 v$80
                                                                v$64
                                                                v$61)))))
                                                  (v$1 v$78 v$77))))
                                             (v$88 (@block-get v$74 v$62)))
                                        (v$88 v$76 v$74 v$75)))))
                               (v$2 v$73 v$61 v$61)))))
                      (v$1 v$71 v$70))))
                 (v$89 (@block-get v$67 v$62)))
            (v$89 v$69 v$67 v$68)))))
  (v$2 v$66 v$61 v$64))
expected output: 
 (let* ((v$1 79)
                 (v$2 (@byte-write v$1))
                 (v$3 75)
                 (v$4 (@byte-write v$3))
                 (v$5 10)
                 (v$6 (@byte-write v$5))
                 (v$7 0))
             (halt v$7))
	at scala.Predef$.assert(Predef.scala:165)
	at l3.test.infrastructure.BasicTest$class.assertEqual(BasicTest.scala:24)
	at l3.test.infrastructure.CPSTest.assertEqual(CPSTest.scala:11)
	at l3.test.infrastructure.CPSOptTest.testCPSOptTreeEquality(CPSOptTest.scala:45)
	at l3.test.CPSOptimizer_Greybox.testInliningConstantFoldingDCE(CPSOptimizer_Greybox.scala:187)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:24)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:136)
	at com.novocode.junit.JUnitRunner.run(JUnitRunner.java:87)
	at sbt.RunnerWrapper$1.runRunner2(FrameworkWrapper.java:223)
	at sbt.RunnerWrapper$1.execute(FrameworkWrapper.java:236)
	at sbt.ForkMain$Run$2.call(ForkMain.java:296)
	at sbt.ForkMain$Run$2.call(ForkMain.java:286)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
</failure>
                                               </testcase>
                     <system-out></system-out>
                     <system-err></system-err>
                   </testsuite>